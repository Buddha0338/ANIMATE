main.py
import os
import shutil
from image_processing import preprocess_image, process_video
from model import predict_species
from my_utils import display_results, save_result, correct_prediction, save_corrected_data, save_filtered_result, image_exists_in_results

def process_images_from_directory(directory, filter_species=None):
    for filename in os.listdir(directory):
        if filename.lower().endswith((".jpg", ".png")):  # Make extension check case-insensitive
            image_path = os.path.join(directory, filename)
            print(f"Processing {image_path}")
            processed_image = preprocess_image(image_path)
            predictions = predict_species(processed_image)
            display_results(predictions)
            
            top_prediction = predictions[0]
            confidence = top_prediction[2]
            if confidence >= 0.34:
                category_dir = save_result(image_path, predictions)
                if category_dir:
                    os.makedirs(category_dir, exist_ok=True)
                    destination_path = os.path.join(category_dir, os.path.basename(image_path))
                    if not os.path.exists(destination_path):
                        shutil.move(image_path, destination_path)
            else:
                correct = input(f"Is the prediction correct for {image_path}? (y/n): ")
                if correct.lower() == 'n':
                    correct_label = input(f"Enter the correct label for {image_path}: ")
                    correct_prediction(image_path, correct_label)
                    save_corrected_data(image_path, correct_label)
                else:
                    category_dir = save_result(image_path, predictions)
                    if category_dir:
                        os.makedirs(category_dir, exist_ok=True)
                        destination_path = os.path.join(category_dir, os.path.basename(image_path))
                        if not os.path.exists(destination_path):
                            shutil.move(image_path, destination_path)

def process_videos_from_directory(directory):
    for filename in os.listdir(directory):
        if filename.lower().endswith((".mp4", ".avi")):  # Make extension check case-insensitive
            video_path = os.path.join(directory, filename)
            print(f"Processing {video_path}")
            process_video(video_path)

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Analyze images or videos.")
    parser.add_argument("--type", type=str, choices=["images", "videos"], required=True, help="Type of files to analyze: 'images' or 'videos'")
    parser.add_argument("--retrain", action='store_true', help="Retrain the model with corrected data")
    parser.add_argument("--fetch", action='store_true', help="Fetch data from GBIF")
    parser.add_argument("--filter", type=str, help="Filter species, e.g., 'elephant'")
    args = parser.parse_args()

    if args.fetch:
        # Fetch data from GBIF
        DATASET_KEY = "your-dataset-key"
        LIMIT = 100
        OFFSET = 0
        COUNTRY = "US"
        fetch_gbif_data(DATASET_KEY, LIMIT, OFFSET, COUNTRY)
    
    if args.type:
        if args.type == "images":
            image_directory = "data/images"
            process_images_from_directory(image_directory, args.filter)
        elif args.type == "videos":
            video_directory = "data/videos"
            process_videos_from_directory(video_directory)
    
    if args.retrain:
        retrain_model()







image_processing.py
import cv2
import numpy as np
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from model import predict_species
from utils import display_results, save_frame_result

def preprocess_image(img_path):
    img = image.load_img(img_path, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    return preprocess_input(img_array)

def process_video(video_path):
    cap = cv2.VideoCapture(video_path)
    frame_count = 0
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        processed_frame = preprocess_frame(frame)
        predictions = predict_species(processed_frame)
        display_results(predictions)
        save_frame_result(frame, predictions, frame_count)
        frame_count += 1
        cv2.imshow('Frame', frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    cap.release()
    cv2.destroyAllWindows()

def preprocess_frame(frame):
    img_array = cv2.resize(frame, (224, 224))
    img_array = np.expand_dims(img_array, axis=0)
    return preprocess_input(img_array)





my_utils.py
import os
import shutil
import cv2
import torch
from datetime import datetime, timedelta
from PIL import Image
from PIL.ExifTags import TAGS
from helpers import preprocess_image
from model import predict_species

# Load YOLOv5 model
yolo_model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)

# Mapping from model species names to provided species list
species_mapping = {
    'elephant': 'African forest elephant – Loxodonta cyclotis',
    'tusker': 'African forest elephant – Loxodonta cyclotis',
    'gorilla': 'Western lowland gorilla – Gorilla gorilla gorilla',
    'chimpanzee': 'Chimpanzee – Pan troglodytes',
    'mandrill': 'Mandrillus sphinx',
    'guenon': 'Mustached guenon – Cercopithecus cephus',
    'mangabey': 'Collared mangabey – Cercocebus torquatus',
    'talapoin': 'Gabon talapoin – Miopithecus ogouensis',
    'sitatunga': 'Tragelaphus spekii',
    'buffalo': 'African forest buffalo – Syncerus caffer nanus',
    'duiker': {
        'peters': 'Peter’s duiker – Cephalophus callipygus',
        'yellow': 'Yellow-backed duiker – Cephalophus silvicultor',
        'bay': 'Bay duiker - Cephalophus dorsalis',
        'blue': 'Blue duiker – Philantomba monticola'
    },
    'pangolin': 'Pangolin géant – Smutsia gigantea',
    'mongoose': 'Mongoose – Possibly Bdeogale nigripes',
    'potamochere': 'Potamochere – Potamochoerus porcus',
    'cricetome': 'Cricetomys emini',
    'genet': 'Genetta maculata',
    'bat': 'Chiroptera sp.',
    'guineafowl': 'Black guineafowl - Agelastes niger',
    'porcupine': 'African crested porcupine'
}

def display_results(predictions):
    for prediction_set in predictions:
        if isinstance(prediction_set, list):
            for prediction in prediction_set:
                if len(prediction) == 3:
                    _, name, score = prediction
                    species = map_species(name)
                    print(f"{species}: {score:.2f}")
                else:
                    print(f"Unexpected prediction format: {prediction}")
        else:
            if len(prediction_set) == 3:
                _, name, score = prediction_set
                species = map_species(name)
                print(f"{species}: {score:.2f}")
            else:
                print(f"Unexpected prediction format: {prediction_set}")

def map_species(name):
    name = name.lower()
    for key in species_mapping:
        if key in name:
            mapped_name = species_mapping[key]
            if isinstance(mapped_name, dict):
                for sub_key in mapped_name:
                    if sub_key in name:
                        return mapped_name[sub_key]
            return mapped_name
    return name.capitalize()

def save_result(image_path, predictions, base_dir='data/results'):
    top_prediction = predictions[0]
    name = top_prediction[1]
    species = map_species(name)
    confidence = top_prediction[2]

    category_dir = None
    
    if confidence >= 0.34:
        if 'elephant' in species.lower():
            category_dir = os.path.join(base_dir, 'Elephant')
        else:
            category_dir = os.path.join(base_dir, 'Other', species)
    else:
        # Prompt for user confirmation for low confidence predictions
        correct = input(f"Is the prediction correct for {image_path}? (y/n): ")
        if correct.lower() == 'n':
            correct_label = input(f"Enter the correct label for {image_path}: ")
            if 'elephant' in correct_label.lower():
                category_dir = os.path.join(base_dir, 'Elephant')
            else:
                category_dir = os.path.join(base_dir, 'Other', correct_label)
        else:
            if 'elephant' in species.lower():
                category_dir = os.path.join(base_dir, 'Elephant')
            else:
                category_dir = os.path.join(base_dir, 'Other', species)
    
    return category_dir

def save_filtered_result(image_path, predictions, filter_species, base_dir='data/results'):
    top_prediction = predictions[0]
    name = top_prediction[1]
    if filter_species.lower() in name.lower():
        category_dir = os.path.join(base_dir, 'Elephant')
    else:
        category_dir = os.path.join(base_dir, 'Other')
    
    os.makedirs(category_dir, exist_ok=True)
    
    if category_dir == os.path.join(base_dir, 'Other'):
        other_species = get_general_species(name)
        other_species_dir = os.path.join(category_dir, other_species)
        os.makedirs(other_species_dir, exist_ok=True)
        category_dir = other_species_dir

    destination_path = os.path.join(category_dir, os.path.basename(image_path))
    if not os.path.exists(destination_path):
        shutil.move(image_path, destination_path)

def save_frame_result(frame, predictions, frame_count, base_dir='data/results'):
    pass  # Functionality moved to correct_prediction to handle after user confirmation

def run_yolo(image_path):
    results = yolo_model(image_path)
    return results

def get_general_species(name):
    if 'elephant' in name.lower() or 'tusker' in name.lower():
        return 'Elephant'
    elif 'gorilla' in name or 'siamang' in name or 'howler_monkey' in name:
        return 'Gorilla'
    elif 'butterfly' in name or 'monarch' in name or 'admiral' in name or 'lycaenid' in name:
        return 'Butterfly'
    else:
        return name.split('_')[0].capitalize()

def parse_timestamp(image_path):
    img = Image.open(image_path)
    exif_data = img._getexif()
    if not exif_data:
        return None
    
    for tag, value in exif_data.items():
        decoded = TAGS.get(tag, tag)
        if decoded == 'DateTime':
            return datetime.strptime(value, "%Y:%m:%d %H:%M:%S")
    return None

def correct_prediction(image_path, correct_label, base_dir='data/results'):
    if 'elephant' in correct_label.lower():
        corrected_dir = os.path.join(base_dir, 'Elephant')
    else:
        corrected_dir = os.path.join(base_dir, 'Other', correct_label)
    
    os.makedirs(corrected_dir, exist_ok=True)
    
    # Move the image to the correct folder
    destination_path = os.path.join(corrected_dir, os.path.basename(image_path))
    if not os.path.exists(destination_path):
        # Remove the image from any existing location in the results directory
        for root, _, files in os.walk(base_dir):
            if os.path.basename(image_path) in files:
                os.remove(os.path.join(root, os.path.basename(image_path)))
        shutil.move(image_path, destination_path)
    else:
        # If the image already exists in the destination, remove the original to avoid duplication
        os.remove(image_path)

def save_corrected_data(image_path, correct_label):
    corrected_data_path = 'data/corrected_data.txt'
    with open(corrected_data_path, 'a') as f:
        f.write(f"{image_path},{correct_label}\n")

def group_images_by_time(image_paths, time_window=5):
    time_window = timedelta(minutes=time_window)
    groups = []
    current_group = []
    last_time = None

    for img_path in sorted(image_paths, key=lambda x: parse_timestamp(x) or datetime.min):
        timestamp = parse_timestamp(img_path)
        if timestamp is None:
            continue

        if last_time is None or (timestamp - last_time) <= time_window:
            current_group.append(img_path)
        else:
            groups.append(current_group)
            current_group = [img_path]
        last_time = timestamp

    if current_group:
        groups.append(current_group)

    return groups

def process_image_group(image_group):
    species_detected = {}
    for img_path in image_group:
        processed_image = preprocess_image(img_path)
        predictions = predict_species(processed_image)
        print(f"Processing {img_path}")
        for _, name, score in predictions:
            if name not in species_detected:
                species_detected[name] = score
            else:
                species_detected[name] = max(species_detected[name], score)

    # Sort species by confidence score and take top 3
    sorted_species = sorted(species_detected.items(), key=lambda item: item[1], reverse=True)[:3]

    # Print sorted species with scores
    for name, score in sorted_species:
        print(f"{name}: {score:.2f}")

    return [name for name, _ in sorted_species]

def run_models(image_path):
    yolo_results = run_yolo(image_path)
    detections = yolo_results.pandas().xyxy[0].to_dict(orient="records")

    predictions = []
    for detection in detections:
        if detection['confidence'] > 0.4:  # Filtering detections with confidence > 0.4
            cropped_img = crop_image(image_path, detection)
            processed_image = preprocess_image(cropped_img)
            predictions.append(predict_species(processed_image))

    return predictions

def crop_image(image_path, detection):
    img = cv2.imread(image_path)
    x1, y1, x2, y2 = int(detection['xmin']), int(detection['ymin']), int(detection['xmax']), int(detection['ymax'])
    cropped_img = img[y1:y2, x1:x2]
    cropped_path = os.path.splitext(image_path)[0] + '_cropped.jpg'
    cv2.imwrite(cropped_path, cropped_img)
    return cropped_path

def image_exists_in_results(image_path, base_dir='data/results'):
    for root, _, files in os.walk(base_dir):
        if os.path.basename(image_path) in files:
            return True
    return False


model.py
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.applications.mobilenet_v2 import decode_predictions

model = MobileNetV2(weights='imagenet')

def predict_species(img):
    preds = model.predict(img)
    return decode_predictions(preds, top=3)[0]
